name: Build and Deploy (Release Candidate)

on:
  pull_request:
    branches: [ primary ]

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Config Environment Variables
      run: |
        $CURRENT_DIR=(Get-Item -Path ".\").FullName
        $PKG_NAME=(Get-Item -Path ".\").Name
        "PKGNAME=$PKG_NAME" | Add-Content -Path $ENV:GITHUB_ENV
        "CURRENTDIR=$CURRENT_DIR" | Add-Content -Path $ENV:GITHUB_ENV
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: dotnet restore
    - name: Build with dotnet
      run: dotnet build --version-suffix="-rc" --configuration Release --no-restore
    - name: Pack NuGet package
      run: dotnet pack --version-suffix="-rc" --configuration Release
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PKGNAME }}
        path: |
          **/bin/Release
          **/obj/Release

  test:
    needs: build
    runs-on: windows-latest
    steps:
    - name: Config Environment Variables
      run: |
        $CURRENT_DIR=(Get-Item -Path ".\").FullName
        $PKG_NAME=(Get-Item -Path ".\").Name
        "PKGNAME=$PKG_NAME" | Add-Content -Path $ENV:GITHUB_ENV
        "CURRENTDIR=$CURRENT_DIR" | Add-Content -Path $ENV:GITHUB_ENV
    - name: Checkout Repository
      uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.PKGNAME }}
    - name: Install dependencies
      run: dotnet restore
    - name: Test with dotnet 3.1
      run: dotnet test --no-build --configuration Release --verbosity normal Jlw.Extensions.Identity.Stores.Tests

  deploy:
    needs: test
    runs-on: ubuntu-latest
    env: 
      DOTNET_NOLOGO: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_MULTILEVEL_LOOKUP: 1
      
    steps:
    - name: Config Environment Variables
      run: |
        export PKG_NAME="$(pwd | sed 's/.*\/\([^\/]*\)$/\1/')"
        echo "PKGNAME=$PKG_NAME" >> $GITHUB_ENV
    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.PKGNAME }}

    - name: Get Package Version
      run: |
        export PKG_NAME="Jlw.Extensions.Identity.Stores"
        echo "PKGNAME=$PKG_NAME" >> $GITHUB_ENV
        export PKG_VERSION="$(echo `ls ./$PKG_NAME/bin/Release/*.nupkg` | sed 's/[^0-9]*\([0-9.a-z\-]*\)\.nupkg/v\1/')"
        echo "PKGVERSION=$PKG_VERSION" >> $GITHUB_ENV
    - name: Publish to github (using curl)
      run: |
        for f in ./${{ env.PKGNAME }}/bin/Release/*.nupkg
        do
          curl -vX PUT -u "${{ secrets.NUGET_USER }}:${{ secrets.GITHUB_TOKEN }}" -F package=@$f https://nuget.pkg.github.com/${{ secrets.NUGET_USER }}/
        done
    - name: Create zip archive
      run: |
        zip -r "${{ env.PKGNAME }}.${{ env.PKGVERSION }}.zip" ./${{ env.PKGNAME }}/bin/Release/* README.md License.txt
    - name: Create Release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.PKGVERSION }} 
        release_name: Release ${{ env.PKGNAME }}
        draft: true
        prerelease: true
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: "./${{ env.PKGNAME }}.${{ env.PKGVERSION }}.zip"
        asset_name: "${{ env.PKGNAME }}.${{ env.PKGVERSION }}.zip"
        asset_content_type: application/zip

  deploy-mock:
    needs: test
    runs-on: ubuntu-latest
    env: 
      DOTNET_NOLOGO: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_MULTILEVEL_LOOKUP: 1
      
    steps:
    - name: Config Environment Variables
      run: |
        export PKG_NAME="$(pwd | sed 's/.*\/\([^\/]*\)$/\1/')"
        echo "PKGNAME=$PKG_NAME" >> $GITHUB_ENV
    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.PKGNAME }}

    - name: Get Package Version
      run: |
        export PKG_NAME="Jlw.Extensions.Identity.Mock"
        echo "PKGNAME=$PKG_NAME" >> $GITHUB_ENV
        export PKG_VERSION="$(echo `ls ./$PKG_NAME/bin/Release/*.nupkg` | sed 's/[^0-9]*\([0-9.a-z\-]*\)\.nupkg/v\1/')"
        echo "PKGVERSION=$PKG_VERSION" >> $GITHUB_ENV
    - name: Publish to github (using curl)
      run: |
        for f in ./${{ env.PKGNAME }}/bin/Release/*.nupkg
        do
          curl -vX PUT -u "${{ secrets.NUGET_USER }}:${{ secrets.GITHUB_TOKEN }}" -F package=@$f https://nuget.pkg.github.com/${{ secrets.NUGET_USER }}/
        done
    - name: Create zip archive
      run: |
        zip -r "${{ env.PKGNAME }}.${{ env.PKGVERSION }}.zip" ./${{ env.PKGNAME }}/bin/Release/* README.md License.txt
    - name: Create Release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.PKGVERSION }} 
        release_name: Release ${{ env.PKGNAME }}
        draft: true
        prerelease: true
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: "./${{ env.PKGNAME }}.${{ env.PKGVERSION }}.zip"
        asset_name: "${{ env.PKGNAME }}.${{ env.PKGVERSION }}.zip"
        asset_content_type: application/zip
    
  cleanup:
    needs: deploy
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Config Environment Variables
      run: |
        export PKG_NAME="$(pwd | sed 's/.*\/\([^\/]*\)$/\1/')"
        echo "::set-env name=PKGNAME::$PKG_NAME"        
    - name: Delete Artifacts
      uses: geekyeggo/delete-artifact@v1
      with:
        name: ${{ env.PKGNAME }}  
        failOnError: false


